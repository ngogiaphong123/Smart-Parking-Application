generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}
model User {
    accountId   String @id @default(auto()) @map("_id") @db.ObjectId
    email       String @unique
    password    String
    firstName   String
    lastName    String
    avatarUrl   String
    avatarFileName String
    role        String
    phone       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    vehicles   Vehicle[]
    reservations ParkingSlot[]
}
model TemperatureSensor {
    recordId    String @id @map("_id")
    unit        String
    timestamp   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    temperature String
}
model LightSensor {
    recordId    String @id @map("_id")
    unit        String
    timestamp   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    lux         String
}
model FanDevice {
    recordId    String @id @map("_id")
    timestamp   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    status      String
}
model ServoDevice {
    recordId    String @id @map("_id")
    timestamp   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    status      String
}
model Vehicle {
    vehicleId   String @id @map("_id") @default(auto()) @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User @relation(fields: [ownerId], references: [accountId], onDelete: Cascade)
    ownerId     String @db.ObjectId
    logs        Logs[]
    rfid        Rfid @relation(fields: [rfidNumber], references: [number], onDelete: Cascade)
    rfidNumber  String @unique
    genre       String
    numberPlate String
    model       String
    parkingSlot ParkingSlot[]
}
model ParkingSlot {
    parkingSlotId   String @id @map("_id") @default(auto()) @db.ObjectId
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    status          String // reserved, occupied, available
    reservedBy      User? @relation(fields: [reservedById], references: [accountId])
    reservedById    String? @db.ObjectId
    vehicle         Vehicle? @relation(fields: [vehicleId], references: [vehicleId])
    vehicleId       String? @db.ObjectId
    pricePerHour    String
    startTime       DateTime?
    logs            Logs[]
}
model Logs {
    logId           String @id @map("_id") @default(auto()) @db.ObjectId
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    timeIn          DateTime @default(now())
    timeOut         DateTime?
    price           String?
    state           String @default("IN")
    parkingSlot     ParkingSlot @relation(fields: [parkingSlotId], references: [parkingSlotId], onDelete: Cascade)
    parkingSlotId   String @db.ObjectId
    vehicle         Vehicle @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
    vehicleId       String @db.ObjectId
}
model Rfid {
    number      String @id @map("_id")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    vehicle     Vehicle?
}